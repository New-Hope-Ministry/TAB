const version=20;var oldVersion=19;const MAIN_CACHE="ARK-cache-version: 20",OLD_MAIN_CACHE=`ARK-cache-version: ${oldVersion}`,VERSION_CACHE="ARK-bibles";var update=!0,updateVar=!0;const urlsToCache=["index.html","manifest.json","code/css/index.css","code/css/lateload.css","code/css/variables.css","images/icons/favicon-16.png","code/js/index.js","code/js/lateload.js","code/js/loadtables.js","code/js/searcher.js","code/js/utilities.js","code/js/variables.js"];async function deleteCaches(){const e=[MAIN_CACHE,"ARK-bibles"],t=await caches.keys();await Promise.all(t.map((async t=>{e.includes(t)||await caches.delete(t)})))}async function deleteCachedFile(e){const t=await caches.open(MAIN_CACHE),a=await t.keys();for(const s of a)s.url.endsWith(e)&&await t.delete(s);return Promise.resolve(!0)}async function fetchOnlineUpdate(e,t){if(!navigator.onLine)return new Response(`${t}: No internet connection error: 503-1`,{status:503});try{const a=await fetch(e,{cache:"reload"});return a.ok?a:new Response(`${t}Network fetch error: 500`,{status:500})}catch(e){return new Response(`${t}Network fetch error: 500-1`,{status:500})}}async function fetchOnline(e,t){if(!navigator.onLine)return new Response(`${t}: No internet connection error: 503-1`,{status:503});try{const a=await fetch(e);return a.ok?a:new Response(`${t}Network fetch error: 500`,{status:500})}catch(e){return new Response(`${t}Network fetch error: 500-1`,{status:500})}}async function checkVerses(){caches.open("ARK-bibles").then((async e=>{const t=await e.keys();if(!t.length)return;const a=t.map((async t=>{const a=t.url;try{const s=await fetch(a,{method:"HEAD",cache:"no-store"});if(404===s.status)return void await e.delete(t);const n=s.headers.get("ETag"),c=await e.match(t);if(c){const s=c.headers.get("ETag");if(n&&s&&n!==s){const s=await fetch(a);s.ok&&await e.put(t,s.clone())}}}catch(e){}}));return Promise.all(a)})).catch((e=>{}))}self.addEventListener("install",(e=>{e.waitUntil((async()=>{const e=await caches.open(MAIN_CACHE),t=await caches.open(OLD_MAIN_CACHE);for(let a of urlsToCache){const s=(await fetch(a,{method:"HEAD"})).headers.get("ETag");let n=await t.match(a);if(n){const t=n.headers.get("ETag");if(s&&t&&s===t)await e.put(a,n);else{const t=await fetch(a,{cache:"reload"});t&&await e.put(a,t)}}else{const t=await fetch(a,{cache:"reload"});t&&await e.put(a,t)}}self.skipWaiting()})())})),self.addEventListener("activate",(async e=>{e.waitUntil((async()=>{await deleteCaches(),await checkVerses(),self.clients.claim()})())})),self.addEventListener("fetch",(e=>{e.respondWith((async()=>{const t=await caches.open(MAIN_CACHE),a=await caches.open("ARK-bibles");var s=new URL(e.request.url),n=s.pathname.split("/").pop();if(s.search="",navigator.onLine){if("variables.js"===n&&updateVar){const e=(await fetch(s,{method:"HEAD"})).headers.get("ETag");let a=await t.match(s);if(a){const c=a.headers.get("ETag");if(e&&c&&e!==c){const e=await fetchOnlineUpdate(s,n);e.ok&&await t.put(s,e)}updateVar=!1}}if("TWFVerses.json"===n&&update){const e=(await fetch(s,{method:"HEAD"})).headers.get("ETag");let t=await a.match(s);if(t){const c=t.headers.get("ETag");if(e&&c&&e!==c){const e=await fetchOnlineUpdate(s,n);e.ok&&await a.put(s,e)}update=!1}}}if(n.endsWith(".json")&&"manifest.json"!==n){const e=await a.match(s);if(e)
//! Start Here
return e;const t=await fetchOnline(s,n);return t.ok?(await a.put(s,t.clone()),t):t}{const e=await t.match(s);if(e)return e;const a=await fetchOnline(s,n);return a.ok?(await t.put(s,a.clone()),a):a}})())}));